// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../generated"
  emitTranspiledCode = true
  emitOnly           = "models"

}

// model Comment {
//   id        String   @id @default(uuid())
//   content   String
//   userId    String?
//   creator   User     @relation(fields: [creatorId], references: [id])
//   creatorId String
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("comment")
// }

model PostTags {
  id     String  @id @default(uuid())
  post   Post?   @relation(fields: [postId], references: [id])
  tag    Tag?    @relation(fields: [tagId], references: [id])
  postId String?
  tagId  String?
}

model Tag {
  id    String     @id @default(uuid())
  name  String     @unique
  posts PostTags[]
}

model Post {
  id        String     @id @default(uuid())
  title     String     @db.VarChar(255)
  tags      PostTags[]
  // creator   User       @relation(fields: [creatorId], references: [id])
  // creatorId String
  url       String // it can be a picture or video
  isVideo   Boolean?   @default(false)
  // embededCode String? // iframe
  createdAt String
  updatedAt DateTime   @updatedAt

  @@map("post")
}

model User {
  id       String @id @default(uuid())
  email    String @unique @db.VarChar(255)
  username String @unique @db.VarChar(50)
  password String @db.Text
  // posts    Post[]
  role     Role   @default(USER)

  @@map("user")
}

enum Role {
  USER
  ADMIN
}
