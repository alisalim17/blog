// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../generated"
  emitTranspiledCode = true
  emitOnly           = "models"

}

// model Comment {
//   id        String   @id @default(uuid())
//   content   String
//   userId    String?
//   creator   User     @relation(fields: [creatorId], references: [id])
//   creatorId String
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("comment")
// }

model PostsCategories {
  id         String    @id @default(uuid())
  post       Post?     @relation(fields: [postId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  postId     String?
  categoryId String?

  @@map("posts_categories")
}

model CategoriesTags {
  id         String    @id @default(uuid())
  tag        Tag?      @relation(fields: [tagId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  tagId      String?
  categoryId String?


  @@map("categories_tags")
}

model Category {
  id         String            @id @default(uuid())
  name       String            @unique
  posts      PostsCategories[]
  tags       CategoriesTags[]
  pictureUrl String?


  @@map("category")
}

model Tag {
  id         String           @id @default(uuid())
  name       String           @unique
  categories CategoriesTags[]

  @@map("tag")
}

model Post {
  id          String            @id @default(uuid())
  title       String            @db.VarChar(255)
  description String?           @db.VarChar()
  categories  PostsCategories[]
  url         String // it can be a picture or video
  isVideo     Boolean?          @default(false)
  createdAt   String
  updatedAt   DateTime          @updatedAt

  @@map("post")
}

model User {
  id   String @id @unique
  role Role   @default(USER)
  // posts    Post[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}
